# Pasta: captura_fala
# Arquivo: ouvir.py

# Importa a biblioteca de reconhecimento de fala
import speech_recognition as sr

# Fun√ß√£o que ouve o microfone e transcreve o que foi falado
def ouvir_microfone():
    # Cria um reconhecedor de fala
    r = sr.Recognizer()
    # Define o microfone como fonte de √°udio
    mic = sr.Microphone()

    # Mensagem para o usu√°rio saber que est√° sendo gravado
    print("üéôÔ∏è Gravando... Fale! (Diga 'encerre a grava√ß√£o' para finalizar)")

    # Lista para armazenar os trechos de texto reconhecidos
    textos = []

    # Abre o microfone como fonte de √°udio
    with mic as source:
        # Ajusta o reconhecedor para ignorar ru√≠dos do ambiente
        r.adjust_for_ambient_noise(source)

        # Entra em um loop para ficar ouvindo continuamente
        while True:
            try:
                # Escuta o √°udio do microfone at√© o usu√°rio parar de falar naturalmente
                audio = r.listen(source, timeout=4)
                # Escuta o √°udio do microfone (timeout de 3 segundos e limite de 5 segundos por frase)
                #audio = r.listen(source, timeout=3, phrase_time_limit=5)
                
                # Usa o servi√ßo da Google para reconhecer o que foi falado
                texto = r.recognize_google(audio, language='pt-BR')
                print(f"üìù Voc√™ disse: {texto}")

                # Se o usu√°rio disser "enviar para voc√™", o programa entende que deve encerrar a grava√ß√£o
                if "pode responder" in texto.lower():
                    print("‚úÖ Comando de voz para encerrar detectado!")
                    break
                else:
                    # Se n√£o for o comando de encerrar, adiciona o texto reconhecido √† lista
                    textos.append(texto)

            except sr.WaitTimeoutError:
                # Se o usu√°rio ficar em sil√™ncio, apenas continua ouvindo (n√£o d√° erro)
                continue
            except sr.UnknownValueError:
                # Caso o √°udio n√£o seja compreendido, avisa o usu√°rio e continua ouvindo
                print("‚ùå N√£o entendi o que voc√™ falou. (√°udio incompreens√≠vel)")
                continue
            except sr.RequestError as e:
                # Se houver erro ao se conectar ao servi√ßo de reconhecimento, exibe o erro e finaliza
                print(f"‚ùå Erro ao conectar ao servi√ßo de reconhecimento: {e}")
                return None

    # Junta todos os trechos de texto falados em uma √∫nica string
    texto_final = " ".join(textos)

    # Exibe o texto final transcrito
    print("\nüßæ Texto final transcrito:")
    print(texto_final)

    # Retorna o texto final
    return texto_final